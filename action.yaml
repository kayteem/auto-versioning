name: 'Increment Version'
description: 'automatically bumps the version for each software module'

inputs:
  token:
    description: 'GITHUB_TOKEN required to create or delete version numbers'
    required: true # required only when generating the initial build-version

outputs:
  build-version:
    description: "the incremented BUILD version number"
    value: ${{ steps.increment_build_version.outputs.build_version }}

runs:
  using: "composite"
  steps:
    - name: increment BUILD version and push tag
      id: increment_build_version
      shell: bash
      run: |
        
        # Get the commit message of the last commit
        COMMIT_MESSAGE=$(git log --format=%B -n 1)
        
        # Determine the prefix based on the commit message
        if [[ "$COMMIT_MESSAGE" == *"BACKEND"* ]]; then
          PREFIX="BACKEND-"
        elif [[ "$COMMIT_MESSAGE" == *"FRONTEND"* ]]; then
          PREFIX="FRONTEND-"
        elif [[ "$COMMIT_MESSAGE" == *"MOBILE"* ]]; then
          PREFIX="MOBILE-"
        else
          echo "Version not incremented, since the commit does not affect any software module."
          echo "build_version=''" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Fetch tags
        git fetch --tags

        # The git rev-list command prints commit hashes from newest to oldest
        # The --tags option restricts the listing to just tag references
        # So this command yields the commit hash of the latest tagged commit in the repository
        # If no tags exist, this command produces no output, and LATEST_TAG will be an empty string
        LATEST_TAG_HASH="$(git rev-list --tags=$PREFIX* --max-count=1)"
        
        # If no tag exists, start from 1
        if [ -z "$LATEST_TAG_HASH" ]; then
          NEW_TAG="${PREFIX}0.0.1"
        
        else
          # Get tag name
          CURRENT_TAG=$(git describe --tags "`echo $LATEST_TAG_HASH`" | sed -e "s/^$PREFIX//g")
        
          # Split tag using IFS (internal field separator)
          IFS='.' read -ra ADDR <<< "$CURRENT_TAG"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          BUILD=${ADDR[2]}
        
          # Increment the BUILD version
          BUILD=$((BUILD + 1))
        
          # Increment the MINOR version, if the commit message contains "MINOR"
          if [[ "$COMMIT_MESSAGE" == *"MINOR"* ]]; then
            MINOR=$((MINOR + 1))
          fi
        
          # Increment the MAJOR version and reset the MINOR version, if the commit message contains "MAJOR"
          if [[ "$COMMIT_MESSAGE" == *"MAJOR"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
          fi
        
          # Form new tag
          NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${BUILD}"
          
          # Delete old tag
          git tag -d "${PREFIX}${CURRENT_TAG}"
          git push --delete origin "${PREFIX}${CURRENT_TAG}"
        fi
        
        # Set new tag and push
        git tag $NEW_TAG
        git push https://${{ inputs.token }}@github.com/${{ github.repository }} --tags
        
        echo "build_version=${NEW_TAG}" >> $GITHUB_OUTPUT
