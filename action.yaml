name: 'Increment Version'
description: 'automatically bumps the version for each software module'

inputs:
  token:
    description: 'GITHUB_TOKEN required to create or delete version numbers'
    required: true # required only when generating the initial build-version

outputs:
  build-version:
    description: "the incremented BUILD version number"
    value: ${{ steps.increment_build_version.outputs.build_version }}
#  module-prefix:
#    description: 'prefix for the build-number tag (required when versioning multiple modules)'

runs:
  using: "composite"
  steps:
    - name: increment BUILD version and push tag
      id: increment_build_version
      shell: bash
      run: |
        # Fetch tags
        git fetch --tags

        # The git rev-list command prints commit hashes from newest to oldest
        # The --tags option restricts the listing to just tag references
        # So this command yields the commit hash of the latest tagged commit in the repository
        # If no tags exist, this command produces no output, and LATEST_TAG will be an empty string
        LATEST_TAG_HASH="$(git rev-list --tags --max-count=1)"
        
        # If no tag exists, start from 1
        if [ -z "$LATEST_TAG_HASH" ]; then
          NEW_TAG=1
        
        else
          # Get tag name
          CURRENT_TAG=$(git describe --tags "`echo $LATEST_TAG_HASH`" 2>/dev/null)
          NEW_TAG=$((CURRENT_TAG + 1))
          
          # Delete old tag
          git tag -d $CURRENT_TAG
          git push --delete origin $CURRENT_TAG
        fi
        
        # Set new tag and push
        git tag $NEW_TAG
        git push https://${{ inputs.token }}@github.com/${{ github.repository }} --tags
        
        echo "build_version=${NEW_TAG}" >> $GITHUB_OUTPUT
